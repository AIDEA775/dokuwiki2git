#!/usr/bin/env python
# Copyright (c) 2011 Heikki Hokkanen <hoxu at users.sf.net>
# License: AGPLv3
import fnmatch
import logging
import os
import sys

USAGE = """
dokuwiki2git converts dokuwiki data directory into a git repository containing
the wiki pages, with proper history. Thus, migration to git-backed wiki engines
(eg. gollum) becomes easier.

Usage:
$ dokuwiki2git /path/to/dokuwiki/data
"""

logging.basicConfig(level = logging.DEBUG)
log = logging.getLogger()
class Converter:
	def __init__(self):
		self.datadir = None
		self.atticdir = None
		self.metadir = None
		self.changelog = [] # (timestamp, ip, changetype, pagename, author, comment)
		self.commands = [] # commands to run to create the git repository

	def get_pagepath_and_timestamp(self, filename):
		filename = os.path.relpath(filename, self.atticdir)
		parts = filename.rsplit('.', 3)
		return parts[0], parts[1] # pagepath, filename

	def has_changelog_entry(self, pagepath, timestamp):
		for c in self.changelog:
			ts = c[0]
			pagename = c[3]
			if timestamp == ts and pagepath == pagename.replace(':', '/'):
				return
		log.warn('Attic contains "%s" timestamp %s, but is not referenced by changelog, skipping. Please report this!' % (pagepath, timestamp))

	def read_attic(self):
		log.debug('Reading attic')

		# Check that all referenced pages exist in attic
		for c in self.changelog:
			pagepath = c[3].replace(':', '/')
			filename = os.path.join(self.atticdir, pagepath + '.%s.txt.gz' % c[0])
			if not os.path.exists(filename):
				log.warn('File "%s" does not exist, despite being in changelog, skipping' % filename)
				continue

			# depending on type of change, either add or remove
			pagepath, timestamp = self.get_pagepath_and_timestamp(filename)
			pagefile = pagepath + '.txt'
			message = c[5]
			author = c[4] + '@' + c[1]
			cmds = []
			if c[2] in ('C', 'E', 'e'): # create, edit, minor edit
				cmds.append('gunzip -c "%s" > "%s"' % (filename, pagefile))
				cmds.append('git add "%s"' % pagefile)
			elif c[2] == 'D': # delete
				cmds.append('git rm "%s"' % pagefile)
			cmds.append('git commit --author="%s" -m "%s"' % (author, message))
			print cmds
			self.commands.extend(cmds)

		# check that all pages in attic have a matching changelog entry
		for path, dirs, files in os.walk(self.atticdir):
			for f in files:
				if fnmatch.fnmatch(f, '*.txt.gz'):
					filename = os.path.relpath(os.path.join(path, f), self.atticdir)
					parts = filename.rsplit('.', 3)
					pagepath = parts[0]
					timestamp = parts[1]
					self.has_changelog_entry(pagepath, timestamp)

	def read_data(self):
		self.commands.append('git init')
		# go through data/meta
		self.read_meta()
		# sort history
		self.changelog.sort()
		#print self.changelog
		#for c in self.changelog:
			#print c
		# TODO go through data/attic, importing pages referenced by .changes in meta
		self.read_attic()
		self.commands.append('git commit --allow-empty --author="dokuwiki2git" -m "Dokuwiki data imported by dokuwiki2git"')
		log.info('%d commands queud to be executed' % len(self.commands))
		# TODO create the git repository, and execute commands

	def read_meta(self):
		log.debug('Reading meta')
		for path, dirs, files in os.walk(self.metadir):
			for f in files:
				if fnmatch.fnmatch(f, '*.changes'):
					#relpath = path[len(self.metadir):]
					relpath = os.path.relpath(os.path.join(path, f), self.metadir)
					pagepath = relpath.rsplit('.', 1)[0]
					#log.debug((path, relpath, pagename))
					self.read_meta_page(pagepath, os.path.join(path, f))
			#print path, dirs, files

	def read_meta_page(self, pagepath, fullpath):
		if pagepath in ('_dokuwiki', '_comments'):
			return
		pagename = pagepath.replace('/', ':')
		log.debug('Reading meta for page "%s"' % pagename)
		with open(fullpath, 'r') as f:
			for line in f:
				changeparts = line.split('\t')
				log.debug(changeparts)
				assert(len(changeparts) == 7)
				assert(changeparts[3] == pagename)
				assert(changeparts[2] in ('C', 'D', 'E', 'e')) # create, delete, edit, minor edit
				self.changelog.append(changeparts)

	def run(self, params):
		if len(params) == 0:
			print USAGE
			sys.exit(0)
		self.set_datadir(params[0])
		self.read_data()

	def set_datadir(self, datadir):
		if not os.path.isfile(os.path.join(datadir, '_dummy')):
			raise RuntimeError('Directory "%s" does not look like a dokuwiki datadir' % datadir)
		self.datadir = datadir
		self.metadir = os.path.join(datadir, 'meta')
		self.atticdir = os.path.join(datadir, 'attic')
		log.info('Using datadir: %s' % self.datadir)

c = Converter()
c.run(sys.argv[1:])
