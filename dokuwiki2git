#!/usr/bin/env python
# Copyright (c) 2011 Heikki Hokkanen <hoxu at users.sf.net>
# License: AGPLv3
import fnmatch
import logging
import os
import sys

USAGE = """
dokuwiki2git converts dokuwiki data directory into a git repository containing
the wiki pages, with proper history. Thus, migration to git-backed wiki engines
(eg. gollum) becomes easier.

Usage:
$ dokuwiki2git /path/to/dokuwiki/data
"""

logging.basicConfig(level = logging.DEBUG)
log = logging.getLogger()
class Converter:
	def __init__(self):
		self.datadir = None
		self.atticdir = None
		self.metadir = None
		self.changelog = [] # (timestamp, ip, changetype, pagename, author, comment)

	def read_attic(self):
		log.debug('Reading attic')
		# Check that all referenced pages exist in attic
		for c in self.changelog:
			pagepath = c[3].replace(':', '/')
			filename = os.path.join(self.atticdir, pagepath + '.%s.txt.gz' % c[0])
			if not os.path.exists(filename):
				log.warn('File "%s" does not exist, despite being in changelog' % filename)

	def read_data(self):
		# go through data/meta
		self.read_meta()
		# sort history
		self.changelog.sort()
		#print self.changelog
		#for c in self.changelog:
			#print c
		# TODO go through data/attic, importing pages referenced by .changes in meta
		self.read_attic()
		# TODO generate a list of commands to execute?

	def read_meta(self):
		log.debug('Reading meta')
		for path, dirs, files in os.walk(self.metadir):
			for f in files:
				if fnmatch.fnmatch(f, '*.changes'):
					#relpath = path[len(self.metadir):]
					relpath = os.path.relpath(os.path.join(path, f), self.metadir)
					pagepath = relpath.rsplit('.', 1)[0]
					#log.debug((path, relpath, pagename))
					self.read_meta_page(pagepath, os.path.join(path, f))
			#print path, dirs, files

	def read_meta_page(self, pagepath, fullpath):
		if pagepath in ('_dokuwiki', '_comments'):
			return
		pagename = pagepath.replace('/', ':')
		log.debug('Reading meta for page "%s"' % pagename)
		with open(fullpath, 'r') as f:
			for line in f:
				changeparts = line.split('\t')
				log.debug(changeparts)
				assert(len(changeparts) == 7)
				assert(changeparts[3] == pagename)
				self.changelog.append(changeparts)

	def run(self, params):
		if len(params) == 0:
			print USAGE
			sys.exit(0)
		self.set_datadir(params[0])
		self.read_data()

	def set_datadir(self, datadir):
		if not os.path.isfile(os.path.join(datadir, '_dummy')):
			raise RuntimeError('Directory "%s" does not look like a dokuwiki datadir' % datadir)
		self.datadir = datadir
		self.metadir = os.path.join(datadir, 'meta')
		self.atticdir = os.path.join(datadir, 'attic')
		log.info('Using datadir: %s' % self.datadir)

c = Converter()
c.run(sys.argv[1:])
